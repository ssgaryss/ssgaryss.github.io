{
    "HomePage": {
        "Main": {
            "name": "邱汇迪",
            "greeting": "Hi there 👋 This is Gary's personal website"
        },
        "Navigation": {
            "Expertise": "专业技能",
            "History": "过往经历",
            "Projects": "相关项目",
            "Contact": "联系本人"
        },
        "Expertise": {
            "Title": "专业技能",
            "Part1": {
                "title": "游戏客户端开发",
                "content": [
                    "我专注于 <1><2>游戏客户端开发</2></1>，并在 <1><2>腾讯光子工作室</2></1> 实习期间积累了丰富的实践经验。",
                    "我熟练使用 <1><2>RenderDoc</2></1> 进行帧捕获和复杂渲染流程的逆向分析。在实习期间，我深入分析了多个最新游戏的渲染技术，包括<1><2>《使命召唤：黑色行动VI》</2></1>和<1><2>《无限暖暖》</2></1>。",
                    "我拥有扎实的 <1><2>OpenGL</2></1> 基础，并完成了多个相关项目，同时也掌握了 <1><2>Vulkan</2></1> 的使用。",
                    "此外，我熟悉 <1><2>虚幻引擎</2></1>，并具备开发自定义插件以扩展其功能的经验。"
                ]
            },
            "Part2": {
                "title": "编程语言",
                "content": [
                    "我非常熟悉 <1><2>C++</2></1>，阅读完成了<1><2>《C++20 高级编程》</2></1>，并开发了多个相关项目，例如一个迷你引擎。",
                    "我擅长对程序进行性能分析并高效解决性能瓶颈，同时保持严格且一致的编码规范。",
                    "此外，我拥有丰富的 <1><2>Python</2></1> 使用经验，这在我整个研究生科研阶段是一项不可或缺技能。",
                    "除了典型的脚本编写，我还使用 Python 开发了多个插件，包括为 <1><2>ZBrush</2></1>、<1><2>3ds Max</2></1>、<1><2>Blender</2></1> 和 <1><2>RenderDoc</2></1> 开发的插件。"
                ]
            },
            "Part3": {
                "title": "研究方向",
                "content": [
                    "我的研究集中在基于 <1><2>2D高斯泼溅</2></1> 的实时重光照算法上。",
                    "我具有扎实的 <1><2>深度学习</2></1> 背景，并且熟悉 <1><2>Python</2></1> 和 <1><2>PyTorch</2></1>。",
                    "我擅长阅读复现学术论文，并能够快速理解其核心贡献。"
                ]
            },
            "KeyWords": "关键词"
        },
        "History": {
            "Title": "过往经历",
            "Time1": {
                "title": "本科在读",
                "subtitle": "四川大学",
                "content": "计算机科学与技术(拔尖计划)专业"
            },
            "Time2": {
                "title": "研究生在读",
                "subtitle": "四川大学",
                "content": "计算机图形学、渲染算法、高斯泼溅"
            },
            "Time3": {
                "title": "游戏客户端开发实习生",
                "subtitle": "腾讯光子工作室群",
                "content": "Unreal Engine、RenderDoc、DCC 插件开发、渲染技术分析"
            }
        },
        "Projects": {
            "Title": "相关项目",
            "project-pika-engine": {
                "title": "Pika 引擎",
                "description": "Pika 引擎是个人独立开发的迷你引擎，旨在将我之所学付诸于实践。"
            },
            "project-cod-analysis": {
                "title": "使命召唤:黑色行动6",
                "description": "在腾讯实习期间，深入分析了2024年10月发布的游戏《使命召唤：黑色行动VI》的渲染技术。"
            },
            "project-nikki-analysis": {
                "title": "无限暖暖",
                "description": "在腾讯实习期间，深入分析了2024年12月发布的游戏《无限暖暖》的渲染技术。"
            },
            "project-rdc-parser": {
                "title": "RDC-Parser",
                "description": "RDC-Parser 是一个命令行工具，能够直接解析 .rdc 文件，将其信息序列化为 JSON 格式，并提取相关的网格、纹理和着色器数据。"
            },
            "project-pubg-upgrader": {
                "title": "PUBGConfigUpgrader",
                "description": "PUBGConfigUpgrader是一个UE Commandlet插件工具，旨在帮助和平精英项目在从UE4迁移至UE5.4过程中，自动化转换其配置文件。"
            },
            "project-model-gray": {
                "title": "ModelGray",
                "description": "ModelGray 是由我支持开发的供腾讯美术团队使用的 AI 高度图生成插件，可以方便一键生成高度图供后续浮雕生成等使用，我为其支持了 ZBrush 和 Blender 两个版本。"
            },
            "project-raytracing": {
                "title": "光线追踪",
                "description": "一个光线追踪练习项目。目前已实现 CPU 多线程版本，目标是迁移至 Vulkan 实现 GPU 加速。"
            }
        },
        "Contact": {
            "Title": "联系本人",
            "Name": {
                "label": "你的名字",
                "placeholder": "你叫什么名字？",
                "helperText": "请输入你的名字"
            },
            "Email": {
                "label": "邮箱 / 电话",
                "placeholder": "我该如何联系你？",
                "helperText": "请输入你的邮箱或电话号码"
            },
            "Message": {
                "label": "留言",
                "placeholder": "欢迎留言或提问",
                "helperText": "请输入留言内容"
            },
            "Send": "发送"
        }
    },

    "PikaEnginePage": {
        "Title": "Pika 引擎",
        "Contents": {
            "title": "目录",
            "items": {
                "Abstract": "概述",
                "ECS": "实体组件系统",
                "Lighting&Shadow": "光照与阴影",
                "Material": "材质",
                "Render": "渲染",
                "Physics": "物理",
                "Serialization": "序列化",
                "Conclusion": "总结"
            }
        },
        "Abstract": {
            "title": "概述",
            "content1": [
                "Pika 引擎是一个自研的小型引擎，用于通过实际开发实现我所掌握的图形知识。由于我开始在 <1>腾讯光子工作室群</1> 实习，目前开发已暂停，未来有时间我会重新支持和更新该引擎。",
                "目前 Pika 引擎支持 2D 和 3D 场景。在 2D 场景中，它使用四边形（Quads）作为基本图元，并支持 <1>批量渲染（Batch Rendering）</1>，以极少的 draw call 渲染整个场景，还支持 <1>2D 物理模拟</1>。"
            ],
            "content2": [
                "在 3D 场景方面，目前支持 <1>天空盒</1>、<1>光照</1> 和 <1>阴影</1>，并允许导入 OBJ 和 FBX 等格式的网格数据。当前的材质系统较为简单，使用预设的 <1>Blinn-Phong</1> 材质。未来版本将加入对 <1>基于物理渲染（PBR）</1> 材质的支持。"
            ]
        },
        "ECS": {
            "title": "实体组件系统",
            "content1": [
                "<1>实体组件系统（ECS）</1> 是一种强大的架构模式，因其灵活性、可扩展性和高性能，在包括 <1>Unreal Engine (UE)</1> 和 <1>Unity</1> 在内的现代游戏引擎中被广泛采用。",
                "Pika 引擎使用第三方库 <3>entt</3> 实现了自己的 ECS。数据与逻辑的分离使 Pika 能够高效地管理实体及其相关组件，例如 <1>UUID</1>、<1>材质</1>、<1>网格</1> 等。"
            ],
            "content2": [
                "如上图所示，你可以通过 UI 方便地配置组件属性、添加或移除组件等操作。"
            ]
        },
        "Lighting&Shadow": {
            "title": "光照与阴影",
            "content1": [
                "Pika 引擎当前支持点光源、聚光灯和平行光，并集成了阴影贴图。未来还计划支持更多光照类型，例如面积光源和自发光表面。",
                "为了减少常见的阴影贴图伪影——尤其是 <1>摩尔纹</1> 和 <1>表面瑕疵</1> ——引擎采用了 <1>反向 Z 缓冲</1> 和增强的深度精度技术来提升图像质量。<1>深度偏移</1> 仍是一个较为棘手的问题，未来将实现一个基于斜率的动态偏移策略，能根据光照方向和表面法线自适应调整，有望有效缓解这些伪影问题。"
            ],
            "content2": [
                "如 <1>级联阴影贴图（CSM）</1>、<1>百分比近似滤波（PCF）</1>、<1>柔化阴影（PCSS）</1> 等更高级的阴影技术尚未实现，未来将随着引擎发展逐步加入。"
            ]
        },
        "Material": {
            "title": "材质",
            "content": [
                "在材质支持方面，Pika 当前提供可配置的 <1>Blinn-Phong</1> 光照模型。未来将引入对基于物理的渲染（PBR）材质的支持，并支持主流 3D 模型格式的完整材质导入与导出，常见的内嵌材质格式如 <1>FBX</1>、<1>glb</1>、<1>glTF</1> 将被支持，以实现与流行建模工具和资源管线的无缝集成。"
            ]
        },
        "Render": {
            "title": "渲染",
            "content": [
                "Pika 的渲染接口采用工厂设计模式，清晰区分了渲染抽象层与底层图形 API。该设计初衷是为支持 <1>OpenGL</1>、<1>DirectX 12</1>、<1>Vulkan</1> 和 <1>Metal</1> 等多种图形后端提供灵活性。",
                "但我很快意识这个设计的一个潜在问题：为了兼容所有图形接口，Pika 引擎渲染接口不得不兼容最弱的一个图形接口——即 OpenGL。由于 OpenGL 缺乏现代特性，如命令缓冲区和多线程渲染，这严重限制了我的渲染系统潜力。",
                "因此，我计划未来彻底放弃 OpenGL，仅支持 Vulkan 作为底层图形接口。Vulkan 不仅跨平台，有助于降低开发负担，也更符合我的技术栈，有利于实现更先进和高效的渲染功能。"
            ]
        },
        "Physics": {
            "title": "物理",
            "content": [
                "物理系统已成为现代游戏引擎不可或缺的一部分。目前，Pika Engine 仅支持 2D 场景下的物理模拟。我集成了开源的 <3>Box2D</3> 库，为 2D 场景中的实体添加了物理碰撞检测与刚体组件。对于 3D 场景，计划使用 NVIDIA 的 <4>PhysX</4> 来实现物理模拟，未来也会开发更高级的物理功能。"
            ]
        },
        "Serialization": {
            "title": "序列化",
            "content1": [
                "Pika 的序列化系统支持场景的保存与加载。当保存当前场景状态时，会将关键信息序列化为 <3>YAML</3> 格式的 .pika 文件。你可以直接将场景从 <1>内容浏览器（Content Browser）</1> 拖入 <1>视口（Viewport）</1>，或使用菜单栏中的导入选项加载场景。"
            ],
            "content2": [
                "此外，模型文件也包含在序列化系统中。目前支持通过 <3>Assimp</3> 库导入与导出模型数据。加载模型时，只需将相应文件拖入模型组件区域即可。"
            ]
        },
        "Conclusion": {
            "title": "总结",
            "content": [
                "Pika 引擎是一个仍待开发的个人项目。由于实习期间时间有限，我没能继续更新。最初我启动这个项目，其一是为了手搓一遍渲染算法加深理解并整合为一个项目，其二是作为面试展示的个人项目。搭建软件框架耗费了我大量精力，以至于未能及时实现多种渲染算法和引擎特性。",
                "如今，我对计算机图形学有了更深入的理解。我分析了如 <1><2><3>《使命召唤：黑色行动6》</3></2></1> 和 <1><2><4>《无限暖暖》</4></2></1> 等最新游戏的渲染技术，也在学习 <1><2>《实时渲染（第4版）》</2></1> 中的经典现代图形渲染算法。我现在更加了解现代游戏引擎（如 Unreal Engine）背后的复杂架构和特性，例如 <1>Lumen</1> 和 <1>Nanite</1>。",
                "凭借这些经验，我比以往更有准备推进 Pika 的开发。未来将重点完善 3D 渲染功能，引入脚本系统、材质系统以及支持更多渲染特性，如抗锯齿、环境光遮蔽和全局光照。我也将彻底淘汰 OpenGL，转而专注于 Vulkan，以实现更高效的渲染表现。敬请期待。"
            ]
        }
    }

}